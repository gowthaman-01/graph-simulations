diff --git a/public/editor.html b/public/editor.html
index 0112c54..65c65be 100644
--- a/public/editor.html
+++ b/public/editor.html
@@ -35,7 +35,7 @@
                 <div class="editor-buttons-subcontainer">
                     <button id="resetGraphButton">Reset graph</button>
                     <div class="dropdown-wrapper">
-                        <button id="gridSizeDropdownButton" class="dropdown grid-size-dropdown">Grid Size</button>
+                        <button id="gridSizeDropdownButton" class="dropdown grid-size-dropdown"></button>
                         <div id="gridSizeDropdownMenu" class="dropdown-menu grid-size-dropdown-menu">
                             <div class="gridSizeDropdownMenu-item dropdown-item" data-value="100">10 x 10</div>
                             <div class="gridSizeDropdownMenu-item dropdown-item" data-value="225">15 x 15</div>
diff --git a/public/index.html b/public/index.html
index cd789c9..5156740 100644
--- a/public/index.html
+++ b/public/index.html
@@ -52,8 +52,7 @@
                 <div class="heuristic-dropdown-container">
                     <p>A* Search Heuristic</p>
                     <div class="dropdown-wrapper">
-                        <button id="heuristicTypeDropdownButton" class="dropdown heuristic-dropdown">Euclidean
-                            Distance</button>
+                        <button id="heuristicTypeDropdownButton" class="dropdown heuristic-dropdown"></button>
                         <div id="heuristicTypeDropdownMenu" class="dropdown-menu heuristic-dropdown-menu">
                             <div class="heuristicTypeDropdownMenu-item dropdown-item" data-value="Euclidean">
                                 Euclidean Distance</div>
@@ -96,7 +95,6 @@
                     <div class="grid-container">
                         <div class="dropdown-wrapper">
                             <button id="leftGraphDropdownButton" class="dropdown algorithm-dropdown">
-                                BFS
                             </button>
                             <div id="leftGraphDropdownMenu" class="dropdown-menu algorithm-dropdown-menu">
                                 <div class="leftGraphDropdownMenu-item dropdown-item" data-value="BFS">BFS</div>
@@ -119,7 +117,6 @@
                     <div class="grid-container">
                         <div class="dropdown-wrapper">
                             <button id="rightGraphDropdownButton" class="dropdown algorithm-dropdown">
-                                Dijkstra
                             </button>
                             <div id="rightGraphDropdownMenu" class="dropdown-menu algorithm-dropdown-menu">
                                 <div class="rightGraphDropdownMenu-item dropdown-item" data-value="Dijkstra">Dijkstra
@@ -216,7 +213,6 @@
                             <p id="speedDropdownText">Speed:</p>
                             <div class="dropdown-wrapper">
                                 <button id="speedDropdownButton" class="dropdown speed-dropdown">
-                                    Average
                                 </button>
                                 <div id="speedDropdownMenu" class="dropdown-menu speed-dropdown-menu">
                                     <div class="speedDropdownMenu-item dropdown-item" data-value="Average">Average</div>
diff --git a/public/main.ts b/public/main.ts
index 78ef1df..9d3fa22 100644
--- a/public/main.ts
+++ b/public/main.ts
@@ -23,6 +23,7 @@ import {
     SecondaryGraphType,
     SimulationSpeed,
     WeightType,
+    Dropdowns,
 } from '../src/common/types';
 import { getGlobalVariablesManagerInstance } from '../src/utils/GlobalVariablesManager';
 import {
@@ -176,7 +177,7 @@ document.addEventListener('DOMContentLoaded', async () => {
     );
 
     // Dropdowns setup function.
-    const setupDropdowns = () => {
+    const setupDropdowns = (): Dropdowns => {
         const setNewGraphDiv = (newAlgorithmType: AlgorithmType, graphPosition: GRAPH_POSITION) => {
             const graphDivs = globalVariablesManager.getGraphDivs(false);
             const currAlgorithmType = graphDivs.find(
@@ -221,7 +222,7 @@ document.addEventListener('DOMContentLoaded', async () => {
             getPrimaryGraphTypeDisplayName(globalVariablesManager.getGraphType()),
             (dataValue) => {
                 const primaryGraphType = dataValue as PrimaryGraphType;
-                let graphType = GraphType.Standard;
+                let graphType: GraphType;
                 switch (primaryGraphType) {
                     case PrimaryGraphType.Maze:
                         graphType = GraphType.RecursiveDivision;
@@ -229,6 +230,7 @@ document.addEventListener('DOMContentLoaded', async () => {
                         break;
                     case PrimaryGraphType.Standard:
                         disableSecondaryGraphTypeDropdown();
+                        graphType = GraphType.Standard;
                         break;
                     case PrimaryGraphType.Custom:
                         graphType = GraphType.Custom;
@@ -242,6 +244,14 @@ document.addEventListener('DOMContentLoaded', async () => {
                     const customGraph = globalVariablesManager.getCustomGraph();
                     if (customGraph) {
                         globalVariablesManager.setGraph(customGraph);
+                        globalVariablesManager.setWeightType(WeightType.NonNegative);
+                        const dropdowns = globalVariablesManager.getDropdowns();
+                        if (dropdowns) {
+                            const weightDropdown = dropdowns.weightDropdown;
+                            weightDropdown.updateTextContent(
+                                getWeightTypeDisplayName(WeightType.NonNegative),
+                            );
+                        }
                         resetGridAndRerun();
                     } else {
                         window.location.href = 'editor.html';
@@ -308,15 +318,24 @@ document.addEventListener('DOMContentLoaded', async () => {
             (dataValue) => {
                 const weightType = dataValue as WeightType;
                 const currentWeightType = globalVariablesManager.getWeightType();
-
+                globalVariablesManager.setWeightType(weightType);
                 if (
                     weightType === WeightType.Unweighted ||
                     currentWeightType === WeightType.Unweighted
                 ) {
-                    globalVariablesManager.setWeightType(weightType);
+                    if (globalVariablesManager.getGraphType() === GraphType.Custom) {
+                        globalVariablesManager.setGraphType(GraphType.Standard);
+                        globalVariablesManager.setWeightType(WeightType.NonNegative);
+                        const dropdowns = globalVariablesManager.getDropdowns();
+                        if (dropdowns) {
+                            const primaryGraphTypeDropdown = dropdowns.primaryGraphTypeDropdown;
+                            primaryGraphTypeDropdown.updateTextContent(
+                                getPrimaryGraphTypeDisplayName(GraphType.Standard),
+                            );
+                        }
+                    }
                     generateNewGraphWithReachableEndNode(resetGridAndRerun);
                 } else {
-                    globalVariablesManager.setWeightType(weightType);
                     resetGridAndRerun();
                 }
             },
@@ -568,7 +587,8 @@ document.addEventListener('DOMContentLoaded', async () => {
     enableGraphControls();
 
     // Setup dropdowns.
-    setupDropdowns();
+    const dropdowns = setupDropdowns();
+    globalVariablesManager.setDropdowns(dropdowns);
 
     window.handleTutorialPageChange = handleTutorialPageChange;
 
@@ -642,11 +662,16 @@ document.addEventListener('DOMContentLoaded', async () => {
     generateNewGraphButton.addEventListener('click', () => {
         if (globalVariablesManager.getGraphType() === GraphType.Custom) {
             globalVariablesManager.setGraphType(GraphType.Standard);
+            const dropdowns = globalVariablesManager.getDropdowns();
+            if (dropdowns) {
+                const primaryGraphTypeDropdown = dropdowns.primaryGraphTypeDropdown;
+                primaryGraphTypeDropdown.updateTextContent(
+                    getPrimaryGraphTypeDisplayName(GraphType.Standard),
+                );
+            }
             generateNewGraphWithReachableEndNode(() => {
                 showWeightControls();
-                primaryGraphTypeDropdownButton.textContent = getPrimaryGraphTypeDisplayName(
-                    GraphType.Standard,
-                );
+                resetGridAndRerun();
                 resetGridAndRerun();
             });
         } else {
diff --git a/src/algorithms/bellman.ts b/src/algorithms/bellman.ts
index a89dafb..dd25573 100644
--- a/src/algorithms/bellman.ts
+++ b/src/algorithms/bellman.ts
@@ -80,9 +80,12 @@ export const bellmanFord = (): RunResults => {
     // Check for negative weight cycles
     for (const node in graph) {
         for (const neighbor of graph[node]) {
-            if (weights[neighbor] > weights[node] + nodes[neighbor]) {
+            if (
+                weights[neighbor] >
+                weights[node] + getNeighborWeight(nodes[node], nodes[neighbor])
+            ) {
                 globalVariablesManager.setContainsNegativeWeightCycle(true);
-                return runResults; // Early exit if a negative cycle is detected
+                return runResults;
             }
         }
     }
diff --git a/src/common/types.ts b/src/common/types.ts
index 49e447f..aa9abc1 100644
--- a/src/common/types.ts
+++ b/src/common/types.ts
@@ -1,3 +1,4 @@
+import { CustomDropdown } from '../utils/CustomDropdown';
 import { GRAPH_POSITION } from './constants';
 
 export type Node = number;
@@ -119,3 +120,13 @@ export interface Color {
     g: number;
     b: number;
 }
+
+export interface Dropdowns {
+    leftGraphDropdown: CustomDropdown;
+    rightGraphDropdown: CustomDropdown;
+    secondaryGraphTypeDropdown: CustomDropdown;
+    primaryGraphTypeDropdown: CustomDropdown;
+    speedDropdown: CustomDropdown;
+    heuristicTypeDropdown: CustomDropdown;
+    weightDropdown: CustomDropdown;
+}
diff --git a/src/utils/CustomDropdown.ts b/src/utils/CustomDropdown.ts
index 2046147..894d08e 100644
--- a/src/utils/CustomDropdown.ts
+++ b/src/utils/CustomDropdown.ts
@@ -2,7 +2,8 @@ export class CustomDropdown {
     private dropdownButton: HTMLButtonElement;
     private dropdownMenu: HTMLElement;
     private dropdownItems: HTMLCollectionOf<Element>;
-    private dropdownArrow: HTMLImageElement | null;
+    private dropdownArrow: HTMLImageElement;
+    private dropdownText: HTMLSpanElement;
     private onSelect: (dataValue: string) => void;
     private _isOpen: boolean;
 
@@ -16,14 +17,17 @@ export class CustomDropdown {
         onSelect: (dataValue: string) => void,
     ) {
         this.dropdownButton = dropdownButton;
-        this.dropdownButton.textContent = defaultText;
+        this.dropdownText = document.createElement('span');
+        this.dropdownText.textContent = defaultText;
+        this.dropdownText.style.pointerEvents = 'none'; // Make span non-interactive
+        this.dropdownButton.appendChild(this.dropdownText);
         this.dropdownMenu = dropdownMenu;
         this.dropdownItems = this.dropdownMenu.getElementsByClassName(
             `${this.dropdownMenu.id}-item`,
         );
+        this.dropdownArrow = this.createArrowImage();
         this.onSelect = onSelect;
         this._isOpen = false;
-        this.dropdownArrow = null;
         this.init();
     }
 
@@ -37,9 +41,29 @@ export class CustomDropdown {
     }
 
     init() {
-        this.updateArrowImage();
-        this.handleItemSelection();
+        this.addButtonEventListeners();
+
+        Array.from(this.dropdownItems).forEach((item: Element) => {
+            this.addItemEventListener(item);
+        });
+    }
+
+    createArrowImage() {
+        const arrowImage = document.createElement('img');
+        arrowImage.classList.add('dropdown-arrow');
+        arrowImage.id = `${this.dropdownButton.id}-arrow`;
+        arrowImage.src = CustomDropdown.DOWN_ARROW;
+        this.dropdownArrow = arrowImage;
+        this.dropdownButton.appendChild(this.dropdownArrow);
 
+        return this.dropdownArrow;
+    }
+
+    updateArrowImage() {
+        this.dropdownArrow.src = this.isOpen ? CustomDropdown.UP_ARROW : CustomDropdown.DOWN_ARROW;
+    }
+
+    addButtonEventListeners() {
         // Toggle dropdown visibility when button is clicked.
         this.dropdownButton.addEventListener('click', () => {
             this.dropdownMenu.classList.toggle('show');
@@ -63,28 +87,43 @@ export class CustomDropdown {
         });
     }
 
-    updateArrowImage() {
-        if (!this.dropdownArrow) {
-            const arrowImage = document.createElement('img');
-            arrowImage.classList.add('dropdown-arrow');
-            arrowImage.id = `${this.dropdownButton.id}-arrow`;
-            this.dropdownArrow = arrowImage;
+    addItemEventListener(item: Element) {
+        item.addEventListener('click', () => {
+            const dataValue = item.getAttribute('data-value');
+            if (dataValue) {
+                this.dropdownText.textContent = item.textContent;
+                this.onSelect(dataValue);
+            }
+            this.dropdownMenu.classList.remove('show');
+            this.isOpen = false;
+        });
+    }
+
+    addItem(dataValue: string) {
+        // Check if item already exis
+        const items = Array.from(this.dropdownItems);
+        const itemExists = items.some((item) => item.getAttribute('data-value') === dataValue);
+        if (itemExists) {
+            return;
         }
-        this.dropdownArrow.src = this.isOpen ? CustomDropdown.UP_ARROW : CustomDropdown.DOWN_ARROW;
-        this.dropdownButton.appendChild(this.dropdownArrow);
+
+        const newItem = document.createElement('div');
+        newItem.classList.add(`${this.dropdownMenu.id}-item`, 'dropdown-item');
+        newItem.setAttribute('data-value', dataValue);
+        newItem.textContent = dataValue;
+        this.dropdownMenu.appendChild(newItem);
+        this.addItemEventListener(newItem);
     }
 
-    handleItemSelection() {
-        Array.from(this.dropdownItems).forEach((item: Element) => {
-            item.addEventListener('click', () => {
-                const dataValue = item.getAttribute('data-value');
-                if (dataValue) {
-                    this.dropdownButton.textContent = item.textContent;
-                    this.onSelect(dataValue);
-                }
-                this.dropdownMenu.classList.remove('show');
-                this.isOpen = false;
-            });
-        });
+    removeItem(dataValue: string) {
+        const items = Array.from(this.dropdownItems);
+        const itemToRemove = items.find((item) => item.getAttribute('data-value') === dataValue);
+        if (itemToRemove) {
+            this.dropdownMenu.removeChild(itemToRemove);
+        }
+    }
+
+    public updateTextContent(dataValue: string) {
+        this.dropdownText.textContent = dataValue;
     }
 }
diff --git a/src/utils/GlobalVariablesManager.ts b/src/utils/GlobalVariablesManager.ts
index f65da56..21934e8 100644
--- a/src/utils/GlobalVariablesManager.ts
+++ b/src/utils/GlobalVariablesManager.ts
@@ -8,6 +8,7 @@ import {
     SimulationSpeed,
     Node,
     WeightType,
+    Dropdowns,
 } from '../common/types';
 import RunResults from './RunResults';
 import { createBasicGridGraph, generateStartAndEndNode } from './graph';
@@ -38,6 +39,7 @@ class GlobalVariablesManager {
     private isSimulationRunning: boolean;
     private isChangingStartEndNode: boolean;
     private customGraph: GraphStructure | null;
+    private dropdowns: Dropdowns | null;
 
     private readonly TUTORIAL_PAGE_MIN = 1;
     private readonly TUTORIAL_PAGE_MAX = 10;
@@ -80,6 +82,7 @@ class GlobalVariablesManager {
         this.showWeights = false;
         this.isSimulationRunning = false;
         this.isChangingStartEndNode = false;
+        this.dropdowns = null;
     }
 
     public static getInstance(): GlobalVariablesManager {
@@ -309,6 +312,14 @@ class GlobalVariablesManager {
         return this.customGraph;
     }
 
+    public setDropdowns(dropdowns: Dropdowns): void {
+        this.dropdowns = dropdowns;
+    }
+
+    public getDropdowns(): Dropdowns | null {
+        return this.dropdowns;
+    }
+
     public saveToLocalStorage(): void {
         const serializedGraph = {
             ...this.graph,
diff --git a/src/utils/graph.ts b/src/utils/graph.ts
index 47a7470..47fd7dd 100644
--- a/src/utils/graph.ts
+++ b/src/utils/graph.ts
@@ -540,9 +540,9 @@ export const getNeighborWeight = (
             return 1;
         case WeightType.Negative:
             return neighborNodeWeight - currentNodeWeight >= 0
-                ? neighborNodeWeight - currentNodeWeight
+                ? Math.max(neighborNodeWeight - currentNodeWeight, 1)
                 : -Math.floor(Math.sqrt(Math.abs(neighborNodeWeight - currentNodeWeight)));
         case WeightType.NonNegative:
-            return Math.max(neighborNodeWeight - currentNodeWeight, 0);
+            return Math.max(neighborNodeWeight - currentNodeWeight, 1);
     }
 };
